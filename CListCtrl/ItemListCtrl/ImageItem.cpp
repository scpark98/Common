// PhotoItem.cpp : implementation file
//

#include "stdafx.h"
#include "ImageItem.h"
#include "resource.h"

#include "Image.h"
#include "FileManager.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

//---------------------------------------------------------------------------
// IMAGE ITEM 을 위한 상수를 선언한다.
//---------------------------------------------------------------------------
#define ITEM_TEXT			20			    //아이템 아래에 출력될 글의 높이

#define ITEM_N_COLOR		RGB(198,198,198)
#define ITEM_S_COLOR		RGB(57,85,148)		
//---------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////////
// CImageItem
CImageItem::CImageItem()
{
	m_pImage = NULL;
}

CImageItem::CImageItem(CImage * pImage)
{
	m_pImage = pImage;
}

CImageItem::CImageItem(CString strPath)
{
	m_pImage = NULL;

	SetImage(strPath);
}

CImageItem::CImageItem(UINT nResource)
{
	m_pImage = NULL;

	SetImage(nResource);	
}

CImageItem::CImageItem(Color clrImage, int nWidth, int nHeight)
{
	m_pImage = NULL;

	SetImage(clrImage, nWidth, nHeight);	
}

//---------------------------------------------------------------------------
// 함수설명 : 사용한 아이템들을 모두 삭제한다.
//---------------------------------------------------------------------------
CImageItem::~CImageItem()
{
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}
}

/////////////////////////////////////////////////////////////////////////////
// CImageItem message handlers
//---------------------------------------------------------------------------
// 함수설명 : 지정된 영상이 Animation 이되도록 출력한다.
//---------------------------------------------------------------------------
void CImageItem::DrawAnimation( CDC * pDC )
{
	DrawAnimation( pDC , 0 , 0 );
}

//---------------------------------------------------------------------------
// 함수설명 : 지정된 영상이 Animation 이되도록 출력한다.
//---------------------------------------------------------------------------
void CImageItem::DrawAnimation( CDC * pDC , int nOffsetX , int nOffsetY )
{
	if( m_pImage == NULL ) return;

	//-----------------------------------------------------------------------
	// Animation 이 되도록 출력될 프레임을 지정한다.
	//-----------------------------------------------------------------------
	if( m_nFrameCount != 1 )
	{
		m_pImage->SetActiveFrame( m_nFramePos++ );
		if (m_nFramePos == m_nFrameCount) m_nFramePos = 0;
	}

	//-----------------------------------------------------------------------
	// Image Item 을 출력한다.
	//-----------------------------------------------------------------------
	Draw( pDC , nOffsetX , nOffsetY );
}

//---------------------------------------------------------------------------
// 함수설명 : 지정된 이미지를 사용하여 Photo 영상을 그린다.
//---------------------------------------------------------------------------
// 변수설명 : pDC : Photo 영상을 출력할 Device Context를 나타낸다.
//---------------------------------------------------------------------------
void CImageItem::Draw( CDC * pDC )
{
	Draw( pDC, 0 , 0 );
}

//---------------------------------------------------------------------------
// 함수설명 : 지정된 이미지를 사용하여 Photo 영상을 그린다.
//---------------------------------------------------------------------------
// 변수설명 : pDC : Photo 영상을 출력할 Device Context를 나타낸다.
//---------------------------------------------------------------------------
void CImageItem::Draw( CDC * pDC , int nOffsetX , int nOffsetY )
{
	if( m_pImage == NULL ) return;

	//-----------------------------------------------------------------------
	// 1. 메모리 DC 객체를 생성한다.
	//-----------------------------------------------------------------------
	CDC MemDC;
	MemDC.CreateCompatibleDC( pDC );

	//-----------------------------------------------------------------------
	// 2. 현 DC와 호환성을 가지는 비트맵 객체를 생성한다.
	//-----------------------------------------------------------------------
	CBitmap MemBitmap;
	MemBitmap.CreateCompatibleBitmap( pDC , m_rcItem.Width() , m_rcItem.Height() );

	//-----------------------------------------------------------------------
	// 3. 메모리 DC에 생성한 비트맵 객체를 선택해 넣는다.
	//-----------------------------------------------------------------------
	CBitmap * pOldBitmap = (CBitmap *)MemDC.SelectObject( &MemBitmap );

	//-----------------------------------------------------------------------
	// 4. 영상을 출력한다. 메모리 DC에 출력한다.
	//-----------------------------------------------------------------------
	MemDC.FillRect(CRect(0, 0, m_rcItem.Width(), m_rcItem.Height()) , &CBrush(ITEM_N_COLOR));

	//-----------------------------------------------------------------------
	// 이미지를 출력한다.
	//-----------------------------------------------------------------------
	DrawImage( &MemDC );

	//-----------------------------------------------------------------------
	// 이미지명을 출력한다.
	//-----------------------------------------------------------------------
	DrawText( &MemDC );

	//-----------------------------------------------------------------------
	// 5. 메모리 DC에 있는 영상을 화면에 출력한다.
	//-----------------------------------------------------------------------
	pDC->BitBlt( nOffsetX + m_rcItem.left , nOffsetY + m_rcItem.top , m_rcItem.Width(), m_rcItem.Height() , &MemDC , 0 , 0 , SRCCOPY );

	//-----------------------------------------------------------------------
	//사용한 리소스를 해제한다.
	//-----------------------------------------------------------------------
	MemDC.SelectObject( pOldBitmap );

	MemBitmap.DeleteObject();
	MemDC.DeleteDC();
}

//---------------------------------------------------------------------------
// 함수설명 : 지정된 파일명을 출력한다.
//---------------------------------------------------------------------------
void CImageItem::DrawText(CDC * pDC)
{
	if( !m_bTitle ) return;

	//-----------------------------------------------------------------------
	// 새로운 폰트를 생성한다.
	//-----------------------------------------------------------------------
	CFont TextFont;
	TextFont.CreateFont(12 , 0, 0, 0, 300 , FALSE, FALSE, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
					 DEFAULT_QUALITY, DEFAULT_PITCH | FF_ROMAN,"굴림");

	//-----------------------------------------------------------------------
	// 새로운 폰트를 Device Context에 선택해 넣는다.
	//-----------------------------------------------------------------------
	CFont *pOldFont = (CFont*) pDC->SelectObject(&TextFont);

	//-----------------------------------------------------------------------
	// 글배경 색상을 변경한다.
	//-----------------------------------------------------------------------
	COLORREF crOldColor = pDC->SetBkColor(ITEM_N_COLOR);

	//-----------------------------------------------------------------------
	// 화일명을 화면에 출력한다.
	//-----------------------------------------------------------------------
	CFileManager fileManager;
	CString strFile = fileManager.GetFileName( m_pImage->GetFileName() );

	CRect rcText( 0, m_rcItem.Height() - ITEM_TEXT + 5 , m_rcItem.Width() , m_rcItem.Height() );
	pDC->DrawText( strFile , rcText , DT_CENTER | DT_VCENTER | DT_WORDBREAK );

	//-----------------------------------------------------------------------
	// 사용한 리소스들을 해제한다.
	//-----------------------------------------------------------------------
	pDC->SetBkColor( crOldColor );
	pDC->SelectObject( pOldFont );
}

//---------------------------------------------------------------------------
// 함수설명 : 이미지 리스트를 구성하는 이미지를 출력한다.
//---------------------------------------------------------------------------
// 부가설명 : 타이틀의 출력을 고려하여 이미지의 출력크기를 결정한다.
//---------------------------------------------------------------------------
void CImageItem::DrawImage(CDC *pDC)
{
	//-----------------------------------------------------------------------
	// 타이틀 아이템의 높이를 계산한다.
	//-----------------------------------------------------------------------
	int nHeight = m_bTitle ? m_rcItem.Height()-ITEM_TEXT : m_rcItem.Height();

	//-----------------------------------------------------------------------
	// 아이템의 높이를 계산한다.
	//-----------------------------------------------------------------------	
	CRect rcImage(0 , 0 , m_rcItem.Width() , nHeight );

	//-----------------------------------------------------------------------
	// 영역을 색칠한다.
	//-----------------------------------------------------------------------
	if( m_nStatus == ITEM_SELECTED )
	{
		pDC->FillRect(rcImage , &CBrush(ITEM_S_COLOR));
	}
	else
	{
		pDC->FillRect(rcImage , &CBrush(ITEM_N_COLOR));
	}

	//-----------------------------------------------------------------------
	// 사각영역을 그린다.
	//-----------------------------------------------------------------------
	CBrush * pOldBrush = (CBrush *)pDC->SelectStockObject(NULL_BRUSH);

	pDC->Rectangle(rcImage);

	pDC->SelectObject( pOldBrush );

	//-----------------------------------------------------------------------
	// 이미지가 출력될 위치를 계산한다.
	//-----------------------------------------------------------------------
	rcImage = CalcImageRect( CRect( 1 , 1 , m_rcItem.Width()-1 , nHeight -1 ));

	//-----------------------------------------------------------------------
	// 이미지를 출력한다.
	//-----------------------------------------------------------------------
	m_pImage->Draw(pDC, Rect(rcImage.left, rcImage.top, rcImage.Width(), rcImage.Height()));	
}

//---------------------------------------------------------------------------
// 함수설명 : 이미지가 출력될 아이템의 영역을 계산한다.
//---------------------------------------------------------------------------
CRect CImageItem::CalcImageRect(CRect rcItem)
{
	double dGap = 0.3;

	int nX , nY , nWidth , nHeight;

	int nImageWidth = m_pImage->GetWidth();
	int nImageHeight = m_pImage->GetHeight();

	if( nImageWidth > nImageHeight )
	{
		if( nImageWidth > (rcItem.Height()) )
		{
			nX = rcItem.left;
			nWidth = rcItem.Width();

			nHeight =  int(double(nImageHeight * rcItem.Width())/ double(nImageWidth) + dGap);
			nY = rcItem.top + int( double(rcItem.Height())/2.0 - double(nHeight)/2.0 + dGap);
		}
		else
		{
			nX = rcItem.left + int( double(rcItem.Width())/2.0 - double(nImageWidth)/2.0 + dGap);
			nWidth = nImageWidth;

			nY = rcItem.top + int( double(rcItem.Height())/2.0 - double(nImageHeight)/2.0 + dGap);
			nHeight = nImageHeight;
		}
	}
	else
	{
		if( nImageHeight > rcItem.Height() )
		{
			nY = rcItem.top;
			nHeight = rcItem.Height();

			nWidth =  int(double(nImageWidth * rcItem.Height())/ double(nImageHeight) + dGap);
			nX = rcItem.left + int( double(rcItem.Width())/2.0 - double(nWidth)/2.0 + dGap);
		}
		else
		{
			nX = rcItem.left + int( double(rcItem.Width())/2.0 - double(nImageWidth)/2.0 + dGap);
			nWidth = nImageWidth;

			nY = rcItem.top + int( double(rcItem.Height())/2.0 - double(nImageHeight)/2.0 + dGap);
			nHeight = nImageHeight;
		}
	}
	
	return CRect( CPoint( nX , nY ) , CSize( nWidth , nHeight ));	
}

//---------------------------------------------------------------------------
// 함수설명 : 아이템의 영역에 맞는 썸네일 영상의 크기를 계산한다.
//---------------------------------------------------------------------------
// 변수설명 :  pImage : 영상정보를 관리하는 이미지객체
//			   nThumbWidth , nThumbHeight : 썸네일 영상의 최대크기
//---------------------------------------------------------------------------
CSize CImageItem::CalcThumnailSize(CImage * pImage, int nThumbWidth, int nThumbHeight)
{
	int nWidth , nHeight;

	int nImageWidth = pImage->GetWidth();
	int nImageHeight = pImage->GetHeight();

	if( nImageWidth > nImageHeight )
	{
		if( nImageWidth > nThumbHeight )
		{
			nWidth = nThumbWidth;
			nHeight =  int(double(nImageHeight * nThumbWidth)/ double(nImageWidth));
		}
		else
		{
			nWidth = nImageWidth;
			nHeight = nImageHeight;
		}
	}
	else
	{
		if( nImageHeight > nThumbHeight )
		{
			nHeight = nThumbHeight;
			nWidth =  int(double(nImageWidth * nThumbHeight)/ double(nImageHeight));
		}
		else
		{
			nWidth = nImageWidth;
			nHeight = nImageHeight;
		}
	}
	
	return CSize(nWidth, nHeight);	
}

//---------------------------------------------------------------------------
// 함수설명 : 이미지객체를 반환한다.
//---------------------------------------------------------------------------
CImage* CImageItem::GetImage()
{
	return m_pImage;
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 이미지객체를 지정한다.
//---------------------------------------------------------------------------
// 부가설명 : 기본적으로 파일명을 타이틀로 지정한다.
//---------------------------------------------------------------------------
void CImageItem::SetImage(CImage * pImage)
{
	//-----------------------------------------------------------------------
	// 이전에 생성된 이미지객체가 존재하는지 체크한다.
	//-----------------------------------------------------------------------
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}

	m_pImage = pImage;

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( m_pImage->GetFileName() );
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 이미지객체를 지정한다.
//---------------------------------------------------------------------------
// 부가설명 : 기본적으로 파일명을 타이틀로 지정한다.
//---------------------------------------------------------------------------
void CImageItem::SetImage(CString strImage)
{
	//-----------------------------------------------------------------------
	// 이전에 생성된 객체가 없다면 이미지를 새롭게 생성한다.
	//-----------------------------------------------------------------------
	if( m_pImage == NULL )
	{
		m_pImage = new CImage();
	}

	m_pImage->Load( strImage );

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( m_pImage->GetFileName() );
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 이미지객체를 지정한다.
//---------------------------------------------------------------------------
// 부가설명 : 기본적으로 파일명을 타이틀로 지정한다.
//---------------------------------------------------------------------------
void CImageItem::SetImage(UINT nResource)
{
	//-----------------------------------------------------------------------
	// 이전에 생성된 객체가 없다면 이미지를 새롭게 생성한다.
	//-----------------------------------------------------------------------
	if( m_pImage == NULL )
	{
		m_pImage = new CImage();
	}

	m_pImage->Load( nResource );

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( m_pImage->GetFileName() );
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 색상 이미지객체를 지정한다.
//---------------------------------------------------------------------------
// 부가설명 : 기본적으로 파일명을 타이틀로 지정한다.
//---------------------------------------------------------------------------
void CImageItem::SetImage(Color clrImage, int nWidth, int nHeight)
{	
	//-----------------------------------------------------------------------
	// 이전에 생성된 객체가 있다면 이를 삭제한다.
	//-----------------------------------------------------------------------
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}

	m_pImage = new CImage( nWidth, nHeight, PixelFormat24bppRGB);

	//-----------------------------------------------------------------------
	// 이미지에서 Graphics 객체를 얻어온다.
	//-----------------------------------------------------------------------
	Graphics * pGraphics = m_pImage->GetGraphics();

	SolidBrush brImage( clrImage );
	pGraphics->FillRectangle( &brImage, Rect(0,0,nWidth,nHeight) );

	delete pGraphics;

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( "Color Image" );
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 이미지객체를 Thumbnail 이미지로 변경하여 저장한다.
//---------------------------------------------------------------------------
// 부가설명 : 지정된 이미지를 Thumbnail 이미지로 변경해야 한다.
//---------------------------------------------------------------------------
void CImageItem::SetThumbnailImage(CImage * pImage)
{
	//-----------------------------------------------------------------------
	// 이전에 생성된 이미지객체가 존재하는지 체크한다.
	//-----------------------------------------------------------------------
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}

	//-----------------------------------------------------------------------
	// 썸네일 이미지를 생성한다.
	//-----------------------------------------------------------------------
	CSize sizeThumb = CalcThumnailSize( pImage, m_rcItem.Width()-2 , m_rcItem.Height()-ITEM_TEXT-2 );

	m_pImage = pImage->GetThumbnailImage( sizeThumb.cx , sizeThumb.cy );

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( pImage->GetFileName() );

	//-----------------------------------------------------------------------
	// 입력된 영상을 삭제한다.
	//-----------------------------------------------------------------------	
	delete pImage;
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 이미지객체를 Thumbnail 이미지로 변경하여 저장한다.
//---------------------------------------------------------------------------
// 부가설명 : 지정된 이미지를 Thumbnail 이미지로 변경해야 한다.
//---------------------------------------------------------------------------
void CImageItem::SetThumbnailImage(CString strImage)
{
	//-----------------------------------------------------------------------
	// 이전에 생성된 이미지객체가 존재하는지 체크한다.
	//-----------------------------------------------------------------------
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}

	//-----------------------------------------------------------------------
	// 임시 영상을 이용하여 썸네일 이미지를 생성한다.
	//-----------------------------------------------------------------------
	CImage imgTemp( strImage );

	CSize sizeThumb = CalcThumnailSize( &imgTemp, m_rcItem.Width()-2 , m_rcItem.Height()-ITEM_TEXT-2 );

	m_pImage = imgTemp.GetThumbnailImage( sizeThumb.cx , sizeThumb.cy );

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( imgTemp.GetFileName() );
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 이미지객체를 Thumbnail 이미지로 변경하여 저장한다.
//---------------------------------------------------------------------------
// 부가설명 : 지정된 이미지를 Thumbnail 이미지로 변경해야 한다.
//---------------------------------------------------------------------------
void CImageItem::SetThumbnailImage(UINT nResource)
{
	//-----------------------------------------------------------------------
	// 이전에 생성된 이미지객체가 존재하는지 체크한다.
	//-----------------------------------------------------------------------
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}

	//-----------------------------------------------------------------------
	// 임시 영상을 이용하여 썸네일 이미지를 생성한다.
	//-----------------------------------------------------------------------
	CImage imgTemp( nResource );

	CSize sizeThumb = CalcThumnailSize( &imgTemp, m_rcItem.Width()-2 , m_rcItem.Height()-ITEM_TEXT-2 );

	m_pImage = imgTemp.GetThumbnailImage( sizeThumb.cx , sizeThumb.cy );

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( imgTemp.GetFileName() );
}

//---------------------------------------------------------------------------
// 함수설명 : 새로운 색상 이미지객체를 지정한다.
//---------------------------------------------------------------------------
// 부가설명 : 기본적으로 파일명을 타이틀로 지정한다.
//---------------------------------------------------------------------------
void CImageItem::SetThumbnailImage(Color clrImage, int nWidth, int nHeight)
{	
	//-----------------------------------------------------------------------
	// 이전에 생성된 객체가 있다면 이를 삭제한다.
	//-----------------------------------------------------------------------
	if( m_pImage != NULL )
	{
		delete m_pImage;
	}

	m_pImage = new CImage( m_rcItem.Width()-2, m_rcItem.Height()-ITEM_TEXT-2);

	//-----------------------------------------------------------------------
	// 이미지에서 Graphics 객체를 얻어온다.
	//-----------------------------------------------------------------------
	Graphics * pGraphics = m_pImage->GetGraphics();

	SolidBrush brImage( clrImage );
	pGraphics->FillRectangle( &brImage, Rect(0,0,nWidth,nHeight) );

	delete pGraphics;

	//-----------------------------------------------------------------------
	// Animation 을 위한 초기화작업이 필요한지 체크한다.
	//-----------------------------------------------------------------------
	if( IsAnimation() ) InitAnimation();

	//-----------------------------------------------------------------------
	// 타이틀을 지정함.
	//-----------------------------------------------------------------------
	SetTitle( "Color Image" );
}

//---------------------------------------------------------------------------
// 함수설명 : 에니메이션을 수행해야하는지를 체크한다.
//---------------------------------------------------------------------------
bool CImageItem::IsAnimation()
{
	if( m_pImage == NULL ) return false;

	if( m_pImage->GetFrameCount() <= 1 ) return false;

	return true;
}

//---------------------------------------------------------------------------
// 함수설명 : 에니메이션 수행을 위해서 
//---------------------------------------------------------------------------
void CImageItem::InitAnimation()
{
	//-----------------------------------------------------------------------
	// 첫번째 Dimension 에서 Frame 의 정보를 얻어온다.
	//-----------------------------------------------------------------------
    m_nFrameCount = m_pImage->GetFrameCount();
	m_nFramePos = 0;
}
