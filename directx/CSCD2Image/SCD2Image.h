/*
- 기존 Gdiplus를 이용한 이미지 표시 및 그리기는 이미지가 크면 클수록 속도가 크게 저하된다.
  Direct2D를 이용해서 이미지를 표시하기 위해 제작함.
  단, Gdiplus를 이용한 CSCGdiplusBitmap은 이미지 정보를 이 클래스에서 저장하고 parent의 CDC에 그렸으나
  CSCD2Image는 CDC에 그리는 것이 아닌 ID2D1DeviceContext에 그려야 하므로
  CSCD2Context를 추가하고 m_d2dc.init(m_hWnd);을 호출하여 그려질 대상 윈도우의 ID2D1DeviceContext를 생성한 후
  그 d2dc에 그려야하므로 CSCD2Image와 CSCD3Context는 함께 사용되어야 한다.

  in .h
	CSCD2Context				m_d2dc;
	CSCD2Image					m_d2back;

  in .cpp
    m_d2dc.init(m_hWnd);
	m_d2back.load(m_d2dc.get_WICFactory(), m_d2dc.get_d2dc(), IDR_JPG_LOBBY, _T("JPG"));
	m_d2back.load(m_d2dc.get_WICFactory(), m_d2dc.get_d2dc(), IDR_PNG_IMAGE);
	or
	m_d2back.load(m_d2dc.get_WICFactory(), m_d2dc.get_d2dc(), _T("d:\\back.jpg"));


[animated gif, webp 등 여러 프레임을 담은 이미지 처리]
- load가 끝나고 total_frame > 1이면 play()가 자동 호출되고
  각 프레임 delay마다 m_frame_index를 증가시키는 thread가 구동되어
  parent window에게 메시지를 보내서 Invalidate()을 통해 화면이 갱신된다.

	m_d2gif.load(m_d2dc.get_WICFactory(), m_d2dc.get_d2dc(), IDR_GIF_NHQV06, _T("GIF"));
	m_d2gif.set_parent(m_hWnd);	//frame_changed 메시지를 받기 위해 parent를 꼭 지정해줘야 한다.
*/

#pragma once

#include <afxwin.h>
//#include <d2d1.h>
#include <d2d1_1.h>
#include <d2d1helper.h>
//#include <d2d1effects.h>
#include <d2d1effects_2.h>
#include <d3d11.h>
#include <wincodec.h>
#include <wrl/client.h>

#include "../../Functions.h"

using namespace Microsoft::WRL;

static const UINT Message_CSCD2Image = ::RegisterWindowMessage(_T("MessageString_CSCD2Image"));

enum
{
	DM_UNDEFINED = 0,
	DM_NONE = 1,
	DM_BACKGROUND = 2,
	DM_PREVIOUS = 3
};

enum class eSCD2Image_DRAW_MODE
{
	draw_mode_original = 0,		//target의 left, top에 원본 크기로 그림
	draw_mode_original_center,	//target의 중앙에 원본 크기로 그림
	draw_mode_stretch,			//target에 꽉차게 그림(non ratio)
	draw_mode_zoom,				//target에 ratio를 유지하여 그림(가로 또는 세로에 꽉참)
};


class CSCD2Image;

class CSCD2ImageMessage
{
public:
	CSCD2ImageMessage(CSCD2Image* _this, int _message, int _frame_index, int _total_frames)
	{
		pThis = _this;
		message = _message;
		frame_index = _frame_index;
		total_frames = _total_frames;
	}

	CSCD2Image* pThis = NULL;
	int		message;
	int		frame_index = -1;
	int		total_frames = -1;
};

class CSCD2Image
{
public:
	CSCD2Image();
	~CSCD2Image();

	enum ENUM_CSCD2ImageMessages
	{
		message_image_modified = 0,
		message_frame_changed,
	};

	//load external image
	HRESULT					load(IWICImagingFactory2* WICfactory, ID2D1DeviceContext* d2context, CString path);

	//load resource image
	HRESULT					load(IWICImagingFactory2* WICfactory, ID2D1DeviceContext* d2context, UINT resource_id, CString type = _T("PNG"));

	//load from raw data
	HRESULT					load(IWICImagingFactory2* WICfactory, ID2D1DeviceContext* d2context, void* data, int width, int height, int channel);

	//must call when the parent window was resized
	HRESULT					on_resize(ID2D1DeviceContext* d2context, IDXGISwapChain* swapchain, int cx, int cy);

	ID2D1Bitmap*			get() { return m_img[m_frame_index].Get(); }

	//get original image demension
	float					get_width() { return m_width; }
	float					get_height() { return m_height; }
	D2D1_SIZE_F				get_size() { return D2D1::SizeF(m_width, m_height); }
	float					get_ratio();
	int						get_channel() { return m_channel; }
	
	//PixelFormat24bppRGB과 같이 정의된 값을 문자열로 리턴하며 simple = true일 경우는 "RGB (24bit)"와 같이 리턴한다.
	//fmt가 주어지지 않으면 현재 이미지의 PixelFormat을 구하여 결과를 리턴한다.
	//한번 구한 후에는 m_pixel_format_str 변수에 저장되고 이를 리턴하지만 다시 구해야 할 경우는 reset = true로 호출한다.
	CString					get_pixel_format_str(WICPixelFormatGUID *pf = NULL, bool simple = true, bool reset = false);


	//m_pBitmap이 유효하고, width, height 모두 0보다 커야 한다.
	bool					is_empty(int index = 0);
	bool					is_valid(int index = 0);

	CString					get_filename(bool fullpath = true);

	int						get_interpolation_mode() { return m_interpolation_mode; }
	void					set_interpolation_mode(int mode);


	//dx, dy 좌표에 dw, dh 크기로 그려준다.
	//dw 또는 dh 중 1개가 1 이상이라면 나머지 1개는 비율에 맞게 자동 조정된다.
	//둘 다 0이하이면 원본 크기로 그려준다.
	//dw, dh가 모두 0이면 dwr, dhr 비율로 조정한 후 그려준다.
	//dwr = 0이면 dhr을 기준으로, dhr=0이면 dwr기준으로 비율을 유지해서 그려준다.
	D2D1_RECT_F				draw(ID2D1DeviceContext* d2dc, int dx = 0, int dy = 0, int dw = 0, int dh = 0, float dwr = 0.f, float dhr = 0.f);

	//pt 좌표에 그려준다.
	D2D1_RECT_F				draw(ID2D1DeviceContext* d2dc, D2D1_POINT_2F pt = D2D1::Point2F());

	//d2dc 캔버스에 정해진 draw mode로 그려준다.
	D2D1_RECT_F				draw(ID2D1DeviceContext* d2dc, eSCD2Image_DRAW_MODE draw_mode = eSCD2Image_DRAW_MODE::draw_mode_zoom);
	D2D1_RECT_F				draw(ID2D1DeviceContext* d2dc, D2D1_RECT_F target, eSCD2Image_DRAW_MODE draw_mode = eSCD2Image_DRAW_MODE::draw_mode_zoom);

	//그림을 그리지 않고 표시될 영역 정보만 얻는다.
	CRect					calc_rect(CRect targetRect, eSCD2Image_DRAW_MODE draw_mode = eSCD2Image_DRAW_MODE::draw_mode_zoom);


	//data멤버에 픽셀 데이터를 가리키도록 한다. 구현중...
	void					get_raw_data();

	void					blend(ID2D1DeviceContext* d2dc, ID2D1Bitmap* src, ID2D1Bitmap* blend_img, int dx, int dy, int sx, int sy, int sw, int sh);
	void					copy(ID2D1DeviceContext* d2dc, ID2D1Bitmap* src, ID2D1Bitmap* dst);
	void					save(CString path);
	void					save(ID2D1Bitmap* img, LPCTSTR path, ...);

//animated gif
	bool					is_animated_image() { return (m_img.size() > 1); }
	int						get_frame_count() { return m_img.size(); }
	void					set_parent(HWND hWnd) { m_parent = hWnd; }
	void					play();
	void					pause(int pos = -1);
	bool					stop();
	//n개의 이미지로 구성된 gif와 같은 이미지일 경우 프레임 이동
	int						goto_frame(int index, bool pause = false);
	void					step(int interval = 1);

//exif
	CSCEXIFInfo				get_exif() { return m_exif_info; }
	CString					get_exif_str();

protected:
	CString					m_filename;// = _T("untitled");

	//load or draw시에 파라미터로 받아서 참조하여 사용하기 위해 선언했을 뿐이고 이 클래스에서 직접 생성하는 것이 아님.
	IWICImagingFactory2*	m_pWICFactory = NULL;
	ID2D1DeviceContext*		m_d2dc = NULL;

	//대부분은 이미지가 1장이지만 animated gif, jfif, webp 등은 n개의 이미지로 구성되므로 deque로 처리한다.
	std::deque<ComPtr<ID2D1Bitmap>>		m_img = std::deque<ComPtr<ID2D1Bitmap>>{ NULL, };
	uint8_t*				data = NULL;
	int						m_frame_index = 0;
	float					m_width = 0.0f;
	float					m_height = 0.0f;
	int						m_channel = 0;
	CString					m_pixel_format_str;
	//촬영된 이미지의 경우 exif 정보를 추출한다.
	CSCEXIFInfo				m_exif_info;
	HRESULT					extract_exif_info(IWICBitmapDecoder* pDecoder);
	HRESULT					load(IWICImagingFactory2* WICfactory, ID2D1DeviceContext* d2context, IWICBitmapDecoder* pDecoder);

	D2D1_BITMAP_INTERPOLATION_MODE m_interpolation_mode = D2D1_BITMAP_INTERPOLATION_MODE_LINEAR;




//animated gif
	HWND					m_parent = NULL; //animation이 진행될 때 parent에게 메시지를 보내기 위해 필요
	std::deque<int>			m_frame_delay; //in milliseconds
	bool					m_run_thread_animation = false;
	bool					m_thread_animation_terminated = true;
	bool					m_ani_paused = false;
	bool					m_ani_mirror = false;

	void					thread_animation();
};
