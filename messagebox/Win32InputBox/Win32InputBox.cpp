#include "Win32InputBox.h"
#include <stdio.h>

#pragma warning (disable: 4312)

/*
History
----------
03/02/2006 
- Initial version development

03/04/2006
- Lessened the complexity of the class, made it less generic (since its purpose is to be simple)
- Updated the dialog template and made OK button as default button

*/

/*
이 파일은 stdafx.h를 이용하지 않고 Win32Api로만 작성되었으므로
Solution Explorer에서 이 파일의 Properties를 열고
C++ 옵션 항목 중 Precompiled Headers를
"Not Using Precompiled Headers"로 세팅해줘야 한다.
*/

#define TIMER_TIMEOUT		0

typedef struct _MSDN_DLGTEMPLATEEX 
{
	WORD dlgVer;
	WORD signature;
	DWORD helpID;
	DWORD exStyle;
	DWORD style;
	WORD cDlgItems;
	short x;
	short y;
	short cx;
	short cy;
	BYTE  _rest[1]; // rest of structure
} MSDN_DLGTEMPLATEEX;

static bool IsDlgTemplateExtended(DLGTEMPLATE *dlgTemplate)
{
	MSDN_DLGTEMPLATEEX *dgExTemplate = (MSDN_DLGTEMPLATEEX *) dlgTemplate;

	// MSDN excerpt:
	//* dlgVer
	//  Specifies the version number of the extended dialog box template. This member must be 1. 
	//* signature
	//  Indicates whether a template is an extended dialog box template. 
	// If signature is 0xFFFF, this is an extended dialog box template. 
	// In this case, the dlgVer member specifies the template version number. 
	// If signature is any value other than 0xFFFF, this is a standard dialog box template that uses the DLGTEMPLATE and DLGITEMTEMPLATE structures. 

	return (dgExTemplate->dlgVer == 1) && (dgExTemplate->signature == 0xFFFF);
}

// Use alignment if supported by the compiler
#ifdef _MSC_VER
#if _MSC_VER > 1200
__declspec(align(4)) 
#endif
#endif

	// per the MSDN, the DLGTEMPLATE must be DWORD aligned
	// this was generated by the DlgResToDlgTemplate tool
	static unsigned char definputbox_dlg[] =
{
	
	0x01,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc8,0x00,0xc8,0x00,0x06,
	0x00,0x16,0x00,0x11,0x00,0xe7,0x00,0x6d,0x00,0x00,0x00,0x00,0x00,0x57,0x00,0x69,
	0x00,0x6e,0x00,0x33,0x00,0x32,0x00,0x49,0x00,0x6e,0x00,0x70,0x00,0x75,0x00,0x74,
	0x00,0x42,0x00,0x6f,0x00,0x78,0x00,0x00,0x00,0x08,0x00,0xbc,0x02,0x00,0x00,0x4d,
	0x00,0x53,0x00,0x20,0x00,0x53,0x00,0x68,0x00,0x65,0x00,0x6c,0x00,0x6c,0x00,0x20,
	0x00,0x44,0x00,0x6c,0x00,0x67,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0x00,0x02,0x50,0x06,0x00,0x04,0x00,0x9d,0x00,0x21,0x00,0xe8,
	0x03,0x00,0x00,0xff,0xff,0x82,0x00,0x50,0x00,0x72,0x00,0x6f,0x00,0x6d,0x00,0x70,
	0x00,0x74,0x00,0x3a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x80,0x00,0x81,0x50,0x06,0x00,0x25,0x00,0xd8,0x00,0x0e,0x00,0xe9,
	0x03,0x00,0x00,0xff,0xff,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x84,0x10,0xa1,0x50,0x06,0x00,0x37,0x00,0xd8,0x00,0x31,0x00,0xea,
	0x03,0x00,0x00,0xff,0xff,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x01,0x00,0x03,0x50,0xab,0x00,0x04,0x00,0x33,0x00,0x0e,0x00,0x01,
	0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x4f,0x00,0x4b,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x50,0xab,0x00,0x15,0x00,0x33,
	0x00,0x0e,0x00,0x02,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x43,0x00,0x41,0x00,0x4e,
	0x00,0x43,0x00,0x45,0x00,0x4c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x27,0x00,0x08,0x00,0x08,0x00,0xff,
	0xff,0xff,0xff,0xff,0xff,0x82,0x00,0x00,0x00,0x00,0x00
/*
	0xc0,0x20,0xc8,0x80,0x00,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x00,0x00,0xb4,0x00,0x39,
    0x00,0x00,0x00,0x00,0x00,0x47,0x00,0x6f,
    0x00,0x74,0x00,0x6f,0x00,0x20,0x00,0x6c,
    0x00,0x69,0x00,0x6e,0x00,0x65,0x00,0x00,
    0x00,0x08,0x00,0x4d,0x00,0x53,0x00,0x20,
    0x00,0x53,0x00,0x68,0x00,0x65,0x00,0x6c,
    0x00,0x6c,0x00,0x20,0x00,0x44,0x00,0x6c,
    0x00,0x67,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x02,0x50,0x00,0x00,0x00,0x00,0x07,
    0x00,0x09,0x00,0x32,0x00,0x0a,0x00,0xb0,
    0x04,0xff,0xff,0x82,0x00,0x26,0x00,0x4c,
    0x00,0x69,0x00,0x6e,0x00,0x65,0x00,0x20,
    0x00,0x4e,0x00,0x75,0x00,0x6d,0x00,0x62,
    0x00,0x65,0x00,0x72,0x00,0x3a,0x00,0x00,
    0x00,0x00,0x00,0x80,0x00,0x81,0x50,0x00,
    0x00,0x00,0x00,0x37,0x00,0x07,0x00,0x39,
    0x00,0x0c,0x00,0x02,0x01,0xff,0xff,0x81,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
    0x00,0x01,0x50,0x00,0x00,0x00,0x00,0x07,
    0x00,0x22,0x00,0x32,0x00,0x0e,0x00,0x01,
    0x00,0xff,0xff,0x80,0x00,0x4f,0x00,0x4b,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x01,0x50,0x00,0x00,0x00,0x00,0x4e,
    0x00,0x22,0x00,0x32,0x00,0x0e,0x00,0x02,
    0x00,0xff,0xff,0x80,0x00,0x43,0x00,0x61,
    0x00,0x6e,0x00,0x63,0x00,0x65,0x00,0x6c,
    0x00,0x00,0x00,0x00,0x00
*/
	/*
	0x01,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0xc8,0x80,0x04,
	0x00,0x00,0x00,0x00,0x00,0x8e,0x00,0x41,0x00,0x00,0x00,0x00,0x00,0x04,0xc9,0x20,
	0x00,0x74,0xc7,0xd9,0xb3,0x00,0x00,0x09,0x00,0x00,0x00,0x00,0x81,0xd1,0xb9,0x40,
	0xc7,0x20,0x00,0xe0,0xac,0x15,0xb5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x02,0x50,0x06,0x00,0x07,0x00,0x63,0x00,0x09,0x00,0xb0,
	0x04,0x00,0x00,0xff,0xff,0x82,0x00,0x04,0xc9,0x20,0x00,0x88,0xbc,0x38,0xd6,0x28,
	0x00,0x26,0x00,0x4c,0x00,0x29,0x00,0x3a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x81,0x50,0x06,0x00,0x13,0x00,0x82,
	0x00,0x0f,0x00,0x02,0x01,0x00,0x00,0xff,0xff,0x81,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x50,0x2f,0x00,0x2a,0x00,0x2b,
	0x00,0x10,0x00,0x01,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0x74,0xc7,0xd9,0xb3,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x50,0x5e,
	0x00,0x2a,0x00,0x2b,0x00,0x10,0x00,0x02,0x00,0x00,0x00,0xff,0xff,0x80,0x00,0xe8,
	0xcd,0x8c,0xc1,0x00,0x00,0x00,0x00
	*/
};

static LPCTSTR definputbox_buttonnames[] = { _T("OK"), _T("CANCEL") };
static const INT_PTR definputbox_buttonids[] = { IDOK, IDCANCEL };

static const INT 
	definputbox_id_prompt = 1000,
	definputbox_id_edit1 = 1001,
	definputbox_id_edit2 = 1002;

WIN32INPUTBOX_PARAM::WIN32INPUTBOX_PARAM()
{
	bMultiline = false;
	hwndOwner = 0;
	DlgTemplateName = 0;
	hInstance = (HINSTANCE) ::GetModuleHandle(0);
	DlgTemplateData = definputbox_dlg;

	bCenter = true;

	dwStylesPlus = 0;
	dwExStylesPlus = 0;
	dwStylesMinus = 0xFFFFFFFF;
	dwExStylesMinus = 0xFFFFFFFF;

	xPos = yPos = -1;

	szResult = 0;
	nResultSize = 0;
}

CWin32InputBox::CWin32InputBox(WIN32INPUTBOX_PARAM *param)
{
	_param = param;
}

CWin32InputBox::~CWin32InputBox()
{

}

void CWin32InputBox::SetParam(WIN32INPUTBOX_PARAM *param)
{
	_param = param;
}

WIN32INPUTBOX_PARAM *CWin32InputBox::GetParam()
{
	return _param;
}

INT_PTR CWin32InputBox::InputBoxEx(WIN32INPUTBOX_PARAM *param)
{
	// Check mandatory parameters
	//if (param->szResult == 0)
	//{
	//	::SetLastError(ERROR_INVALID_PARAMETER);
	//	return 0;
	//}

	LPDLGTEMPLATE dlgTemplate = (LPDLGTEMPLATE) param->DlgTemplateData;

	if (param->DlgTemplateName != 0)
	{
		HMODULE hModule = (HMODULE)param->hInstance;
		HRSRC rcDlg = ::FindResource(hModule, MAKEINTRESOURCE(param->DlgTemplateName), RT_DIALOG);
		if (rcDlg == NULL)
			return 0;

		HGLOBAL hglobalDlg = ::LoadResource(hModule, rcDlg);
		if (hglobalDlg == NULL)
			return 0;

		dlgTemplate = (LPDLGTEMPLATE) hglobalDlg;
	}
	else if (param->DlgTemplateData != 0)
	{
		dlgTemplate = (LPDLGTEMPLATE) param->DlgTemplateData;
	}

	MSDN_DLGTEMPLATEEX *dlgTemplateEx = 
		IsDlgTemplateExtended((LPDLGTEMPLATE) dlgTemplate) ? (MSDN_DLGTEMPLATEEX *) dlgTemplate : 0;

	if (dlgTemplateEx != 0)
	{
		dlgTemplateEx->exStyle |= param->dwExStylesPlus;
		dlgTemplateEx->style   |= param->dwStylesPlus;
		dlgTemplateEx->exStyle &= param->dwExStylesMinus;
		dlgTemplateEx->style   &= param->dwStylesMinus;

		if (param->bCenter)
			dlgTemplateEx->style |= DS_CENTER;

		if (param->xPos != -1)
			dlgTemplateEx->x = param->xPos;
		if (param->yPos != -1)
			dlgTemplateEx->y = param->yPos;
	}
	else
	{
		dlgTemplate->dwExtendedStyle  |= param->dwExStylesPlus;
		dlgTemplate->style            |= param->dwStylesPlus;
		dlgTemplate->dwExtendedStyle  &= param->dwExStylesMinus;
		dlgTemplate->style            &= param->dwStylesMinus;

		if (param->bCenter)
			dlgTemplate->style |= DS_CENTER;

		if (param->xPos != -1)
			dlgTemplate->x = param->xPos;

		if (param->yPos != -1)
			dlgTemplate->y = param->yPos;
	}

	CWin32InputBox inputbox(param);

	// Resize dialog and SHOW or HIDE multiline
	INT_PTR r = ::DialogBoxIndirectParam(param->hInstance, dlgTemplate, param->hwndOwner, (DLGPROC)DlgProc, (LPARAM)&inputbox);

	return r;
}
/*
INT_PTR CWin32InputBox::InputBox(
	LPCTSTR szTitle, 
	LPCTSTR szPrompt, 
	LPTSTR szResult, 
	DWORD nResultSize,
	bool bMultiLine,
	HWND hwndParent)
{
	WIN32INPUTBOX_PARAM param;

	param.szTitle = szTitle;
	param.szPrompt = szPrompt;
	param.szResult = szResult;
	param.nResultSize = nResultSize;
	param.bMultiline = bMultiLine;

	return InputBoxEx(&param);
}
*/
INT_PTR CWin32InputBox::InputBox(
	LPCTSTR szTitle,
	LPCTSTR szPrompt,
	LPTSTR szResult,
	DWORD nResultSize,
	int style,//enum FLAGS {NORMAL=0,MULTILINE,NUMERIC,PASSWORD};
	int nTimeout,
	HWND hwndParent)
{
	WIN32INPUTBOX_PARAM param;

	if(style==MULTILINE)
	{
		definputbox_dlg[149] =0;
		definputbox_dlg[148] =128;
		param.bMultiline=true;
	}
	else if(style==NUMERIC)
	{
		definputbox_dlg[149] =32;
		definputbox_dlg[148] =128;
		param.bMultiline=false;
	}
	else if(style==PASSWORD)
	{
		definputbox_dlg[149] =0;
		definputbox_dlg[148] =160;
		param.bMultiline=false;
	}
	else if ( style == MESSAGE )
	{
		param.bMultiline = false;
	}
	else
	{
		definputbox_dlg[149] =0;
		definputbox_dlg[148] =128;
		param.bMultiline=false;
	}
	param.szTitle = szTitle;
	param.szPrompt = szPrompt;
	param.szResult = szResult;
	param.nResultSize = nResultSize;
	param.m_nTimeout = nTimeout;
	param.m_nStyle = style;

	return InputBoxEx(&param);
}

void CWin32InputBox::InitDialog()
{
	// Set the button captions
	for (size_t i=0;i<sizeof(definputbox_buttonids)/sizeof(definputbox_buttonids[0]);i++)
		::SetDlgItemText(_param->hDlg, (int) definputbox_buttonids[i], definputbox_buttonnames[i]);

	if ( _param->m_nStyle == MESSAGE )
	{
		::ShowWindow( ::GetDlgItem( _param->hDlg, definputbox_buttonids[0] ), SW_HIDE );
		::ShowWindow( ::GetDlgItem( _param->hDlg, definputbox_buttonids[1] ), SW_HIDE );
		::ShowWindow( ::GetDlgItem( _param->hDlg, definputbox_id_edit1 ), SW_HIDE );
		::ShowWindow( ::GetDlgItem( _param->hDlg, definputbox_id_edit2 ), SW_HIDE );
	}

	// Set other controls
	::SetWindowText(_param->hDlg, _param->szTitle);
	::SetDlgItemText(_param->hDlg, definputbox_id_prompt, _param->szPrompt);

	HWND hwndEdit1 = ::GetDlgItem(_param->hDlg, definputbox_id_edit1);
	HWND hwndEdit2 = ::GetDlgItem(_param->hDlg, definputbox_id_edit2);

	if (_param->bMultiline)
		_hwndEditCtrl = hwndEdit2;
	else
		_hwndEditCtrl = hwndEdit1;

	::SetWindowText(_hwndEditCtrl, _param->szResult);

	RECT rectDlg, rectEdit1, rectEdit2;

	::GetWindowRect(_param->hDlg, &rectDlg);
	::GetWindowRect(hwndEdit1, &rectEdit1);
	::GetWindowRect(hwndEdit2, &rectEdit2);

	if (_param->bMultiline)
	{
		::ShowWindow(hwndEdit1, SW_HIDE);
		::SetWindowPos(
			hwndEdit2, 
			HWND_NOTOPMOST, 
			rectEdit1.left - rectDlg.left - 8, 
			(rectEdit1.top - rectDlg.top) - (rectEdit1.bottom - rectEdit1.top), 
			0, 
			0, 
			SWP_NOSIZE | SWP_NOZORDER);

		::SetWindowPos(
			_param->hDlg, 
			HWND_NOTOPMOST, 
			0, 
			0, 
			rectDlg.right - rectDlg.left, 
			rectDlg.bottom - rectDlg.top - (rectEdit1.bottom - rectEdit1.top) + 5, 
			SWP_NOMOVE);

	}
	else
	{
		::SetWindowPos(
			_param->hDlg, 
			HWND_NOTOPMOST, 
			0, 
			0, 
			rectDlg.right - rectDlg.left, 
			rectEdit1.bottom - rectDlg.top + 15,
			SWP_NOMOVE);

		::ShowWindow(hwndEdit2, SW_HIDE);
	}

	if ( /*(_param->m_nStyle == MESSAGE) &&*/ (_param->m_nTimeout > 0) )
		::SetTimer( _param->hDlg, TIMER_TIMEOUT, 1000, NULL );
}

// Message handler for about box.
LRESULT CALLBACK CWin32InputBox::DlgProc(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	CWin32InputBox *_this = (CWin32InputBox *) ::GetWindowLongPtr(hDlg, GWLP_USERDATA);
	WIN32INPUTBOX_PARAM *param = _this ? _this->GetParam() : 0;

	switch (message)
	{
	case WM_INITDIALOG:
		{
			::SetWindowLongPtr(hDlg, GWLP_USERDATA, (LONG_PTR) lParam);

			_this = (CWin32InputBox *)  lParam;
			_this->_param->hDlg = hDlg;
			_this->InitDialog();
			return TRUE;
		}

	case WM_COMMAND:
		{
#ifdef _MY_DEBUG
			CHAR buf[1024];
			static int i=0;
			sprintf(buf, "WM_COMMAND: %09d wParam=%08X lParam=%08X\n", i++, wParam, lParam);
			OutputDebugString(buf);
#endif
			INT_PTR buttonId = LOWORD(wParam);
			for (size_t i=0;
				i<sizeof(definputbox_buttonids)/sizeof(definputbox_buttonids[0]);
				i++)
			{
				if (buttonId == definputbox_buttonids[i]) 
				{
					::GetWindowText(
						_this->_hwndEditCtrl, 
						_this->_param->szResult, 
						_this->_param->nResultSize);

					::EndDialog(hDlg, buttonId);
					return TRUE;
				}
			}
		}
		break;
	case WM_TIMER :
		{
			TCHAR str[128];
			param->m_nTimeout--;

			_stprintf( str, _T("%s - %d\0"), param->szTitle, param->m_nTimeout );
			::SetWindowText( _this->_param->hDlg, str );

			if ( param->m_nTimeout <= 0 )
			{
				KillTimer( _this->_param->hDlg, TIMER_TIMEOUT );
				::PostMessage( _this->_param->hDlg, WM_CLOSE, 0, 0 );
			}
		break;
		}
	}
	return FALSE;
}

void CWin32InputBox::show_template_dlg()
{
  ::DialogBoxIndirectParam((HINSTANCE) ::GetModuleHandle(0), 
              (LPCDLGTEMPLATE) definputbox_dlg, 0, (DLGPROC)DlgProc, 0);
}